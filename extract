#! /usr/local/bin/python

import argparse
import collections
from datetime import datetime
from decimal import Decimal
import itertools
import psycopg2
import re
import unicodecsv

desc = 'Extract the transaction section of a Shoeboxed CSV export.'
ap = argparse.ArgumentParser(description=desc)
ap.add_argument('--version', action='version', version='SettleUp 0.1')

# desc = 'The source CSV file. If omitted will read from STDIN.'
desc = 'The source CSV file.'
ap.add_argument('source_csv', metavar='FILE', help=desc)

# to be done later
# desc = 'The output CSV file. If omitted will write to STDOUT.'

args = ap.parse_args()

# assume that the transaction section header is a record having at least:
#   Date, Store, Total (USD), Payment Type, Categories, Link
# if there is no such record then the export format has changed
# and we don't have the requisite fields to proceed
def is_transaction_prefix(record):
    mark = {'Date', 'Store', 'Total (USD)', 'Payment Type', 'Categories', 'Link'}
    return set(record).issuperset(mark)

# the transaction section is followed by a blank record
def is_transaction_suffix(record):
    return len([f for f in record if f]) == 0

class ShoeboxedCSVReader(object):
    def __init__(self, f):
        self.reader = itertools.takewhile(lambda x: not is_transaction_suffix(x),
                      itertools.dropwhile(lambda x: not is_transaction_prefix(x),
                      unicodecsv.reader(f)))

        # we want to fail here if no records match is_transaction_prefix
        self.header = self.reader.next()

    def __iter__(self): return iter(self.reader)

# compile regex for credit card
card = re.compile(r'Card \(([0-9]{4})\)')

# create named tuple which is all of the target fields
Transaction = collections.namedtuple('Transaction', [
    'amount', 'merchant_name', 'cc', 'owner', 'remote_id', 'transaction_date'
])

def record_to_transaction(record):
    if not record['Total (USD)']:
        raise ValueError('No transaction amount recorded')

    if not record['Link']:
        raise ValueError('No pdf link recorded')

    if not record['Store']:
        merchant_name = None
    else:
        merchant_name = record['Store']

    if not record['Date']:
        transaction_date = None
    else:
        transaction_date = datetime.strptime(record['Date'], '%b %d, %Y').date()

    amount = Decimal(record['Total (USD)'])

    # remote_id is the last path component of Link
    remote_id = record['Link'].split('/')[-1]

    if card.match(record['Payment Type']):
        mo = card.match(record['Payment Type'])
        cc = mo.group(1)
    elif 'By Melanie' in record['Categories']:
        cc = 'MELA'
    elif 'By Kaiting' in record['Categories']:
        cc = 'KMAN'
    else:
        raise ValueError('Batch rejected due to no payer label or cc number')

    # Review later
    # One and exactly one of:
    #   For Both of Us, For Melanie, For Kaiting
    # must be in Categories
    if 'For Both of Us' in record['Categories']:
        owner = None
    elif 'For Melanie' in record['Categories']:
        owner = 'Melanie Plageman'
    elif 'For Kaiting' in record['Categories']:
        owner = 'Kaiting Chen'
    else:
        raise ValueError('Data Steward made a mistake')

    return Transaction(
        merchant_name = merchant_name,
        cc = cc,
        amount = amount,
        remote_id = remote_id,
        owner = owner,
        transaction_date = transaction_date
    )

with open(args.source_csv, 'r') as f:
    reader = ShoeboxedCSVReader(f)

    rawcsv = [ dict(zip(reader.header, record)) for record in reader ]

    for record in rawcsv:
        record['Categories'] = record['Categories'].split(', ')

    relcsv = [ record for record in rawcsv if 'NYC' not in record['Categories'] ]

    for record in relcsv:
        print record_to_transaction(record)
